// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  firstName         String
  lastName          String
  verficationCode   Int?
  isAuthenticated   Boolean        @default(false)
  isAlreadyLoggedIn Boolean
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  bookings          Booking[]
  payments          Payment[]
  reviews           Review[]
  Notification      Notification[]
  Card              Card[]
}

model Card {
  id         Int           @id @default(autoincrement())
  provider   String
  name       String
  number     String
  expiryDate DateTime
  cvc        Int
  type       PaymentMethod
  user       User          @relation(fields: [userId], references: [id])
  userId     Int
  Payment    Payment[]
}

model Merchant {
  id           Int               @id @default(autoincrement())
  name         String
  email        String            @unique
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  reviews      Review[]
  services     MerchantService[]
  Notification Notification[]
  Booking      Booking[]
}

model MerchantService {
  id          Int       @id @default(autoincrement())
  serviceName String
  price       Float
  merchant    Merchant  @relation(fields: [merchantId], references: [id])
  merchantId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Booking     Booking[]
  Review      Review[]
}

model Booking {
  id                Int             @id @default(autoincrement())
  user              User            @relation(fields: [userId], references: [id])
  userId            Int
  merchantService   MerchantService @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId Int
  merchant          Merchant        @relation(fields: [merchantId], references: [id])
  merchantId        Int
  service           String
  status            BookingStatus   @default(PENDING)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  payment           Payment?
  review            Review?
}

model Payment {
  id        Int           @id @default(autoincrement())
  amount    Float
  currency  String
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  user      User          @relation(fields: [userId], references: [id])
  userId    Int
  booking   Booking       @relation(fields: [bookingId], references: [id])
  bookingId Int           @unique
  card      Card          @relation(fields: [cardId], references: [id])
  cardId    Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Review {
  id                Int              @id @default(autoincrement())
  rating            Int              @default(0)
  comment           String?
  feedback          String?
  user              User             @relation(fields: [userId], references: [id])
  userId            Int
  merchant          Merchant?        @relation(fields: [merchantId], references: [id])
  merchantId        Int?
  merchantService   MerchantService? @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId Int?
  booking           Booking?         @relation(fields: [bookingId], references: [id])
  bookingId         Int?             @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum BookingStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CRYPTO
  SN_BALANCE
  GBP_WALLET
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Notification {
  id         Int       @id @default(autoincrement())
  message    String
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
  merchantId Int?
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
